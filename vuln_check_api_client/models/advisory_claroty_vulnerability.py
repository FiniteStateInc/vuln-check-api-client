from collections.abc import Mapping
from typing import Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AdvisoryClarotyVulnerability")


@_attrs_define
class AdvisoryClarotyVulnerability:
    """
    Attributes:
        advisory_url (Union[Unset, str]):
        claroty_url (Union[Unset, str]):
        cve (Union[Unset, list[str]]):
        cvss_v3 (Union[Unset, float]):
        cwe (Union[Unset, str]):
        date_added (Union[Unset, str]):
        product (Union[Unset, str]):
        target (Union[Unset, str]):
        vendor (Union[Unset, str]):
        vendor_advisory_url (Union[Unset, str]):
    """

    advisory_url: Union[Unset, str] = UNSET
    claroty_url: Union[Unset, str] = UNSET
    cve: Union[Unset, list[str]] = UNSET
    cvss_v3: Union[Unset, float] = UNSET
    cwe: Union[Unset, str] = UNSET
    date_added: Union[Unset, str] = UNSET
    product: Union[Unset, str] = UNSET
    target: Union[Unset, str] = UNSET
    vendor: Union[Unset, str] = UNSET
    vendor_advisory_url: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        advisory_url = self.advisory_url

        claroty_url = self.claroty_url

        cve: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cve, Unset):
            cve = self.cve

        cvss_v3 = self.cvss_v3

        cwe = self.cwe

        date_added = self.date_added

        product = self.product

        target = self.target

        vendor = self.vendor

        vendor_advisory_url = self.vendor_advisory_url

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if advisory_url is not UNSET:
            field_dict["advisory_url"] = advisory_url
        if claroty_url is not UNSET:
            field_dict["claroty_url"] = claroty_url
        if cve is not UNSET:
            field_dict["cve"] = cve
        if cvss_v3 is not UNSET:
            field_dict["cvss_v3"] = cvss_v3
        if cwe is not UNSET:
            field_dict["cwe"] = cwe
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if product is not UNSET:
            field_dict["product"] = product
        if target is not UNSET:
            field_dict["target"] = target
        if vendor is not UNSET:
            field_dict["vendor"] = vendor
        if vendor_advisory_url is not UNSET:
            field_dict["vendor_advisory_url"] = vendor_advisory_url

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        advisory_url = d.pop("advisory_url", UNSET)

        claroty_url = d.pop("claroty_url", UNSET)

        cve = cast(list[str], d.pop("cve", UNSET))

        cvss_v3 = d.pop("cvss_v3", UNSET)

        cwe = d.pop("cwe", UNSET)

        date_added = d.pop("date_added", UNSET)

        product = d.pop("product", UNSET)

        target = d.pop("target", UNSET)

        vendor = d.pop("vendor", UNSET)

        vendor_advisory_url = d.pop("vendor_advisory_url", UNSET)

        advisory_claroty_vulnerability = cls(
            advisory_url=advisory_url,
            claroty_url=claroty_url,
            cve=cve,
            cvss_v3=cvss_v3,
            cwe=cwe,
            date_added=date_added,
            product=product,
            target=target,
            vendor=vendor,
            vendor_advisory_url=vendor_advisory_url,
        )

        advisory_claroty_vulnerability.additional_properties = d
        return advisory_claroty_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
