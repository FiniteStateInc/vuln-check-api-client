from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.api_exploit_chain_cve import ApiExploitChainCVE


T = TypeVar("T", bound="ApiExploitChain")


@_attrs_define
class ApiExploitChain:
    """
    Attributes:
        cves (Union[Unset, list['ApiExploitChainCVE']]):
        date_added (Union[Unset, str]):
        url (Union[Unset, str]):
    """

    cves: Union[Unset, list["ApiExploitChainCVE"]] = UNSET
    date_added: Union[Unset, str] = UNSET
    url: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cves: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.cves, Unset):
            cves = []
            for cves_item_data in self.cves:
                cves_item = cves_item_data.to_dict()
                cves.append(cves_item)

        date_added = self.date_added

        url = self.url

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cves is not UNSET:
            field_dict["cves"] = cves
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if url is not UNSET:
            field_dict["url"] = url

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.api_exploit_chain_cve import ApiExploitChainCVE

        d = dict(src_dict)
        cves = []
        _cves = d.pop("cves", UNSET)
        for cves_item_data in _cves or []:
            cves_item = ApiExploitChainCVE.from_dict(cves_item_data)

            cves.append(cves_item)

        date_added = d.pop("date_added", UNSET)

        url = d.pop("url", UNSET)

        api_exploit_chain = cls(
            cves=cves,
            date_added=date_added,
            url=url,
        )

        api_exploit_chain.additional_properties = d
        return api_exploit_chain

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
