from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.advisory_acknowledgement import AdvisoryAcknowledgement
    from ..models.advisory_i_val import AdvisoryIVal
    from ..models.advisory_m_product_status import AdvisoryMProductStatus
    from ..models.advisory_m_remediation import AdvisoryMRemediation
    from ..models.advisory_note import AdvisoryNote
    from ..models.advisory_r_revision import AdvisoryRRevision
    from ..models.advisory_r_score_set import AdvisoryRScoreSet
    from ..models.advisory_r_threat import AdvisoryRThreat


T = TypeVar("T", bound="AdvisoryMVulnerability")


@_attrs_define
class AdvisoryMVulnerability:
    """
    Attributes:
        product_statuses (Union[Unset, list['AdvisoryMProductStatus']]):
        remediations (Union[Unset, list['AdvisoryMRemediation']]):
        threats (Union[Unset, list['AdvisoryRThreat']]):
        acknowledgments (Union[Unset, list['AdvisoryAcknowledgement']]):
        cve (Union[Unset, str]):
        cvssscoresets (Union[Unset, list['AdvisoryRScoreSet']]):
        notes (Union[Unset, list['AdvisoryNote']]):
        ordinal (Union[Unset, str]):
        revisionhistory (Union[Unset, list['AdvisoryRRevision']]): diff in xml/json
        title (Union[Unset, AdvisoryIVal]):
    """

    product_statuses: Union[Unset, list["AdvisoryMProductStatus"]] = UNSET
    remediations: Union[Unset, list["AdvisoryMRemediation"]] = UNSET
    threats: Union[Unset, list["AdvisoryRThreat"]] = UNSET
    acknowledgments: Union[Unset, list["AdvisoryAcknowledgement"]] = UNSET
    cve: Union[Unset, str] = UNSET
    cvssscoresets: Union[Unset, list["AdvisoryRScoreSet"]] = UNSET
    notes: Union[Unset, list["AdvisoryNote"]] = UNSET
    ordinal: Union[Unset, str] = UNSET
    revisionhistory: Union[Unset, list["AdvisoryRRevision"]] = UNSET
    title: Union[Unset, "AdvisoryIVal"] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        product_statuses: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.product_statuses, Unset):
            product_statuses = []
            for product_statuses_item_data in self.product_statuses:
                product_statuses_item = product_statuses_item_data.to_dict()
                product_statuses.append(product_statuses_item)

        remediations: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.remediations, Unset):
            remediations = []
            for remediations_item_data in self.remediations:
                remediations_item = remediations_item_data.to_dict()
                remediations.append(remediations_item)

        threats: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.threats, Unset):
            threats = []
            for threats_item_data in self.threats:
                threats_item = threats_item_data.to_dict()
                threats.append(threats_item)

        acknowledgments: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.acknowledgments, Unset):
            acknowledgments = []
            for acknowledgments_item_data in self.acknowledgments:
                acknowledgments_item = acknowledgments_item_data.to_dict()
                acknowledgments.append(acknowledgments_item)

        cve = self.cve

        cvssscoresets: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.cvssscoresets, Unset):
            cvssscoresets = []
            for cvssscoresets_item_data in self.cvssscoresets:
                cvssscoresets_item = cvssscoresets_item_data.to_dict()
                cvssscoresets.append(cvssscoresets_item)

        notes: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.notes, Unset):
            notes = []
            for notes_item_data in self.notes:
                notes_item = notes_item_data.to_dict()
                notes.append(notes_item)

        ordinal = self.ordinal

        revisionhistory: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.revisionhistory, Unset):
            revisionhistory = []
            for revisionhistory_item_data in self.revisionhistory:
                revisionhistory_item = revisionhistory_item_data.to_dict()
                revisionhistory.append(revisionhistory_item)

        title: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.title, Unset):
            title = self.title.to_dict()

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if product_statuses is not UNSET:
            field_dict["ProductStatuses"] = product_statuses
        if remediations is not UNSET:
            field_dict["Remediations"] = remediations
        if threats is not UNSET:
            field_dict["Threats"] = threats
        if acknowledgments is not UNSET:
            field_dict["acknowledgments"] = acknowledgments
        if cve is not UNSET:
            field_dict["cve"] = cve
        if cvssscoresets is not UNSET:
            field_dict["cvssscoresets"] = cvssscoresets
        if notes is not UNSET:
            field_dict["notes"] = notes
        if ordinal is not UNSET:
            field_dict["ordinal"] = ordinal
        if revisionhistory is not UNSET:
            field_dict["revisionhistory"] = revisionhistory
        if title is not UNSET:
            field_dict["title"] = title

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.advisory_acknowledgement import AdvisoryAcknowledgement
        from ..models.advisory_i_val import AdvisoryIVal
        from ..models.advisory_m_product_status import AdvisoryMProductStatus
        from ..models.advisory_m_remediation import AdvisoryMRemediation
        from ..models.advisory_note import AdvisoryNote
        from ..models.advisory_r_revision import AdvisoryRRevision
        from ..models.advisory_r_score_set import AdvisoryRScoreSet
        from ..models.advisory_r_threat import AdvisoryRThreat

        d = dict(src_dict)
        product_statuses = []
        _product_statuses = d.pop("ProductStatuses", UNSET)
        for product_statuses_item_data in _product_statuses or []:
            product_statuses_item = AdvisoryMProductStatus.from_dict(product_statuses_item_data)

            product_statuses.append(product_statuses_item)

        remediations = []
        _remediations = d.pop("Remediations", UNSET)
        for remediations_item_data in _remediations or []:
            remediations_item = AdvisoryMRemediation.from_dict(remediations_item_data)

            remediations.append(remediations_item)

        threats = []
        _threats = d.pop("Threats", UNSET)
        for threats_item_data in _threats or []:
            threats_item = AdvisoryRThreat.from_dict(threats_item_data)

            threats.append(threats_item)

        acknowledgments = []
        _acknowledgments = d.pop("acknowledgments", UNSET)
        for acknowledgments_item_data in _acknowledgments or []:
            acknowledgments_item = AdvisoryAcknowledgement.from_dict(acknowledgments_item_data)

            acknowledgments.append(acknowledgments_item)

        cve = d.pop("cve", UNSET)

        cvssscoresets = []
        _cvssscoresets = d.pop("cvssscoresets", UNSET)
        for cvssscoresets_item_data in _cvssscoresets or []:
            cvssscoresets_item = AdvisoryRScoreSet.from_dict(cvssscoresets_item_data)

            cvssscoresets.append(cvssscoresets_item)

        notes = []
        _notes = d.pop("notes", UNSET)
        for notes_item_data in _notes or []:
            notes_item = AdvisoryNote.from_dict(notes_item_data)

            notes.append(notes_item)

        ordinal = d.pop("ordinal", UNSET)

        revisionhistory = []
        _revisionhistory = d.pop("revisionhistory", UNSET)
        for revisionhistory_item_data in _revisionhistory or []:
            revisionhistory_item = AdvisoryRRevision.from_dict(revisionhistory_item_data)

            revisionhistory.append(revisionhistory_item)

        _title = d.pop("title", UNSET)
        title: Union[Unset, AdvisoryIVal]
        if isinstance(_title, Unset):
            title = UNSET
        else:
            title = AdvisoryIVal.from_dict(_title)

        advisory_m_vulnerability = cls(
            product_statuses=product_statuses,
            remediations=remediations,
            threats=threats,
            acknowledgments=acknowledgments,
            cve=cve,
            cvssscoresets=cvssscoresets,
            notes=notes,
            ordinal=ordinal,
            revisionhistory=revisionhistory,
            title=title,
        )

        advisory_m_vulnerability.additional_properties = d
        return advisory_m_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
