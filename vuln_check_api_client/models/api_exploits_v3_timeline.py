from collections.abc import Mapping
from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ApiExploitsV3Timeline")


@_attrs_define
class ApiExploitsV3Timeline:
    """
    Attributes:
        cisa_kev_date_added (Union[Unset, str]):
        cisa_kev_date_due (Union[Unset, str]):
        first_exploit_published (Union[Unset, str]):
        first_exploit_published_weaponized_or_higher (Union[Unset, str]):
        first_reported_botnet (Union[Unset, str]):
        first_reported_ransomware (Union[Unset, str]):
        first_reported_threat_actor (Union[Unset, str]):
        most_recent_exploit_published (Union[Unset, str]):
        most_recent_reported_botnet (Union[Unset, str]):
        most_recent_reported_ransomware (Union[Unset, str]):
        most_recent_reported_threat_actor (Union[Unset, str]):
        nvd_last_modified (Union[Unset, str]): it's often the case the nvd record was updated, but in a way that is
            irrelevant to the contents
            of a vc exploits record.
        nvd_published (Union[Unset, str]):
        vulncheck_kev_date_added (Union[Unset, str]):
        vulncheck_kev_date_due (Union[Unset, str]):
    """

    cisa_kev_date_added: Union[Unset, str] = UNSET
    cisa_kev_date_due: Union[Unset, str] = UNSET
    first_exploit_published: Union[Unset, str] = UNSET
    first_exploit_published_weaponized_or_higher: Union[Unset, str] = UNSET
    first_reported_botnet: Union[Unset, str] = UNSET
    first_reported_ransomware: Union[Unset, str] = UNSET
    first_reported_threat_actor: Union[Unset, str] = UNSET
    most_recent_exploit_published: Union[Unset, str] = UNSET
    most_recent_reported_botnet: Union[Unset, str] = UNSET
    most_recent_reported_ransomware: Union[Unset, str] = UNSET
    most_recent_reported_threat_actor: Union[Unset, str] = UNSET
    nvd_last_modified: Union[Unset, str] = UNSET
    nvd_published: Union[Unset, str] = UNSET
    vulncheck_kev_date_added: Union[Unset, str] = UNSET
    vulncheck_kev_date_due: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cisa_kev_date_added = self.cisa_kev_date_added

        cisa_kev_date_due = self.cisa_kev_date_due

        first_exploit_published = self.first_exploit_published

        first_exploit_published_weaponized_or_higher = self.first_exploit_published_weaponized_or_higher

        first_reported_botnet = self.first_reported_botnet

        first_reported_ransomware = self.first_reported_ransomware

        first_reported_threat_actor = self.first_reported_threat_actor

        most_recent_exploit_published = self.most_recent_exploit_published

        most_recent_reported_botnet = self.most_recent_reported_botnet

        most_recent_reported_ransomware = self.most_recent_reported_ransomware

        most_recent_reported_threat_actor = self.most_recent_reported_threat_actor

        nvd_last_modified = self.nvd_last_modified

        nvd_published = self.nvd_published

        vulncheck_kev_date_added = self.vulncheck_kev_date_added

        vulncheck_kev_date_due = self.vulncheck_kev_date_due

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cisa_kev_date_added is not UNSET:
            field_dict["cisa_kev_date_added"] = cisa_kev_date_added
        if cisa_kev_date_due is not UNSET:
            field_dict["cisa_kev_date_due"] = cisa_kev_date_due
        if first_exploit_published is not UNSET:
            field_dict["first_exploit_published"] = first_exploit_published
        if first_exploit_published_weaponized_or_higher is not UNSET:
            field_dict["first_exploit_published_weaponized_or_higher"] = first_exploit_published_weaponized_or_higher
        if first_reported_botnet is not UNSET:
            field_dict["first_reported_botnet"] = first_reported_botnet
        if first_reported_ransomware is not UNSET:
            field_dict["first_reported_ransomware"] = first_reported_ransomware
        if first_reported_threat_actor is not UNSET:
            field_dict["first_reported_threat_actor"] = first_reported_threat_actor
        if most_recent_exploit_published is not UNSET:
            field_dict["most_recent_exploit_published"] = most_recent_exploit_published
        if most_recent_reported_botnet is not UNSET:
            field_dict["most_recent_reported_botnet"] = most_recent_reported_botnet
        if most_recent_reported_ransomware is not UNSET:
            field_dict["most_recent_reported_ransomware"] = most_recent_reported_ransomware
        if most_recent_reported_threat_actor is not UNSET:
            field_dict["most_recent_reported_threat_actor"] = most_recent_reported_threat_actor
        if nvd_last_modified is not UNSET:
            field_dict["nvd_last_modified"] = nvd_last_modified
        if nvd_published is not UNSET:
            field_dict["nvd_published"] = nvd_published
        if vulncheck_kev_date_added is not UNSET:
            field_dict["vulncheck_kev_date_added"] = vulncheck_kev_date_added
        if vulncheck_kev_date_due is not UNSET:
            field_dict["vulncheck_kev_date_due"] = vulncheck_kev_date_due

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        cisa_kev_date_added = d.pop("cisa_kev_date_added", UNSET)

        cisa_kev_date_due = d.pop("cisa_kev_date_due", UNSET)

        first_exploit_published = d.pop("first_exploit_published", UNSET)

        first_exploit_published_weaponized_or_higher = d.pop("first_exploit_published_weaponized_or_higher", UNSET)

        first_reported_botnet = d.pop("first_reported_botnet", UNSET)

        first_reported_ransomware = d.pop("first_reported_ransomware", UNSET)

        first_reported_threat_actor = d.pop("first_reported_threat_actor", UNSET)

        most_recent_exploit_published = d.pop("most_recent_exploit_published", UNSET)

        most_recent_reported_botnet = d.pop("most_recent_reported_botnet", UNSET)

        most_recent_reported_ransomware = d.pop("most_recent_reported_ransomware", UNSET)

        most_recent_reported_threat_actor = d.pop("most_recent_reported_threat_actor", UNSET)

        nvd_last_modified = d.pop("nvd_last_modified", UNSET)

        nvd_published = d.pop("nvd_published", UNSET)

        vulncheck_kev_date_added = d.pop("vulncheck_kev_date_added", UNSET)

        vulncheck_kev_date_due = d.pop("vulncheck_kev_date_due", UNSET)

        api_exploits_v3_timeline = cls(
            cisa_kev_date_added=cisa_kev_date_added,
            cisa_kev_date_due=cisa_kev_date_due,
            first_exploit_published=first_exploit_published,
            first_exploit_published_weaponized_or_higher=first_exploit_published_weaponized_or_higher,
            first_reported_botnet=first_reported_botnet,
            first_reported_ransomware=first_reported_ransomware,
            first_reported_threat_actor=first_reported_threat_actor,
            most_recent_exploit_published=most_recent_exploit_published,
            most_recent_reported_botnet=most_recent_reported_botnet,
            most_recent_reported_ransomware=most_recent_reported_ransomware,
            most_recent_reported_threat_actor=most_recent_reported_threat_actor,
            nvd_last_modified=nvd_last_modified,
            nvd_published=nvd_published,
            vulncheck_kev_date_added=vulncheck_kev_date_added,
            vulncheck_kev_date_due=vulncheck_kev_date_due,
        )

        api_exploits_v3_timeline.additional_properties = d
        return api_exploits_v3_timeline

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
