from collections.abc import Mapping
from typing import Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AdvisoryShadowServerExploitedVulnerability")


@_attrs_define
class AdvisoryShadowServerExploitedVulnerability:
    """
    Attributes:
        cnvd (Union[Unset, str]):
        cve (Union[Unset, list[str]]):
        date_added (Union[Unset, str]):
        detections_last_1_day (Union[Unset, int]):
        detections_last_30_days (Union[Unset, int]):
        detections_last_7_days (Union[Unset, int]):
        detections_last_90_days (Union[Unset, int]):
        edb (Union[Unset, str]):
        in_kev (Union[Unset, bool]):
        is_iot (Union[Unset, bool]):
        is_ransomware (Union[Unset, bool]):
        product (Union[Unset, str]):
        url (Union[Unset, str]):
        vendor (Union[Unset, str]):
        vulnerability_id (Union[Unset, str]):
        vulnerability_link (Union[Unset, str]):
    """

    cnvd: Union[Unset, str] = UNSET
    cve: Union[Unset, list[str]] = UNSET
    date_added: Union[Unset, str] = UNSET
    detections_last_1_day: Union[Unset, int] = UNSET
    detections_last_30_days: Union[Unset, int] = UNSET
    detections_last_7_days: Union[Unset, int] = UNSET
    detections_last_90_days: Union[Unset, int] = UNSET
    edb: Union[Unset, str] = UNSET
    in_kev: Union[Unset, bool] = UNSET
    is_iot: Union[Unset, bool] = UNSET
    is_ransomware: Union[Unset, bool] = UNSET
    product: Union[Unset, str] = UNSET
    url: Union[Unset, str] = UNSET
    vendor: Union[Unset, str] = UNSET
    vulnerability_id: Union[Unset, str] = UNSET
    vulnerability_link: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cnvd = self.cnvd

        cve: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cve, Unset):
            cve = self.cve

        date_added = self.date_added

        detections_last_1_day = self.detections_last_1_day

        detections_last_30_days = self.detections_last_30_days

        detections_last_7_days = self.detections_last_7_days

        detections_last_90_days = self.detections_last_90_days

        edb = self.edb

        in_kev = self.in_kev

        is_iot = self.is_iot

        is_ransomware = self.is_ransomware

        product = self.product

        url = self.url

        vendor = self.vendor

        vulnerability_id = self.vulnerability_id

        vulnerability_link = self.vulnerability_link

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cnvd is not UNSET:
            field_dict["cnvd"] = cnvd
        if cve is not UNSET:
            field_dict["cve"] = cve
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if detections_last_1_day is not UNSET:
            field_dict["detections_last_1_day"] = detections_last_1_day
        if detections_last_30_days is not UNSET:
            field_dict["detections_last_30_days"] = detections_last_30_days
        if detections_last_7_days is not UNSET:
            field_dict["detections_last_7_days"] = detections_last_7_days
        if detections_last_90_days is not UNSET:
            field_dict["detections_last_90_days"] = detections_last_90_days
        if edb is not UNSET:
            field_dict["edb"] = edb
        if in_kev is not UNSET:
            field_dict["in_kev"] = in_kev
        if is_iot is not UNSET:
            field_dict["is_iot"] = is_iot
        if is_ransomware is not UNSET:
            field_dict["is_ransomware"] = is_ransomware
        if product is not UNSET:
            field_dict["product"] = product
        if url is not UNSET:
            field_dict["url"] = url
        if vendor is not UNSET:
            field_dict["vendor"] = vendor
        if vulnerability_id is not UNSET:
            field_dict["vulnerability_id"] = vulnerability_id
        if vulnerability_link is not UNSET:
            field_dict["vulnerability_link"] = vulnerability_link

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        cnvd = d.pop("cnvd", UNSET)

        cve = cast(list[str], d.pop("cve", UNSET))

        date_added = d.pop("date_added", UNSET)

        detections_last_1_day = d.pop("detections_last_1_day", UNSET)

        detections_last_30_days = d.pop("detections_last_30_days", UNSET)

        detections_last_7_days = d.pop("detections_last_7_days", UNSET)

        detections_last_90_days = d.pop("detections_last_90_days", UNSET)

        edb = d.pop("edb", UNSET)

        in_kev = d.pop("in_kev", UNSET)

        is_iot = d.pop("is_iot", UNSET)

        is_ransomware = d.pop("is_ransomware", UNSET)

        product = d.pop("product", UNSET)

        url = d.pop("url", UNSET)

        vendor = d.pop("vendor", UNSET)

        vulnerability_id = d.pop("vulnerability_id", UNSET)

        vulnerability_link = d.pop("vulnerability_link", UNSET)

        advisory_shadow_server_exploited_vulnerability = cls(
            cnvd=cnvd,
            cve=cve,
            date_added=date_added,
            detections_last_1_day=detections_last_1_day,
            detections_last_30_days=detections_last_30_days,
            detections_last_7_days=detections_last_7_days,
            detections_last_90_days=detections_last_90_days,
            edb=edb,
            in_kev=in_kev,
            is_iot=is_iot,
            is_ransomware=is_ransomware,
            product=product,
            url=url,
            vendor=vendor,
            vulnerability_id=vulnerability_id,
            vulnerability_link=vulnerability_link,
        )

        advisory_shadow_server_exploited_vulnerability.additional_properties = d
        return advisory_shadow_server_exploited_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
