from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.api_exploits_change_new_value import ApiExploitsChangeNewValue
    from ..models.api_exploits_change_old_value import ApiExploitsChangeOldValue


T = TypeVar("T", bound="ApiExploitsChange")


@_attrs_define
class ApiExploitsChange:
    """
    Attributes:
        change_time (Union[Unset, str]):
        change_type (Union[Unset, str]):
        field (Union[Unset, str]):
        new_value (Union[Unset, ApiExploitsChangeNewValue]):
        old_value (Union[Unset, ApiExploitsChangeOldValue]):
    """

    change_time: Union[Unset, str] = UNSET
    change_type: Union[Unset, str] = UNSET
    field: Union[Unset, str] = UNSET
    new_value: Union[Unset, "ApiExploitsChangeNewValue"] = UNSET
    old_value: Union[Unset, "ApiExploitsChangeOldValue"] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        change_time = self.change_time

        change_type = self.change_type

        field = self.field

        new_value: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.new_value, Unset):
            new_value = self.new_value.to_dict()

        old_value: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.old_value, Unset):
            old_value = self.old_value.to_dict()

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if change_time is not UNSET:
            field_dict["change_time"] = change_time
        if change_type is not UNSET:
            field_dict["change_type"] = change_type
        if field is not UNSET:
            field_dict["field"] = field
        if new_value is not UNSET:
            field_dict["new_value"] = new_value
        if old_value is not UNSET:
            field_dict["old_value"] = old_value

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.api_exploits_change_new_value import ApiExploitsChangeNewValue
        from ..models.api_exploits_change_old_value import ApiExploitsChangeOldValue

        d = dict(src_dict)
        change_time = d.pop("change_time", UNSET)

        change_type = d.pop("change_type", UNSET)

        field = d.pop("field", UNSET)

        _new_value = d.pop("new_value", UNSET)
        new_value: Union[Unset, ApiExploitsChangeNewValue]
        if isinstance(_new_value, Unset):
            new_value = UNSET
        else:
            new_value = ApiExploitsChangeNewValue.from_dict(_new_value)

        _old_value = d.pop("old_value", UNSET)
        old_value: Union[Unset, ApiExploitsChangeOldValue]
        if isinstance(_old_value, Unset):
            old_value = UNSET
        else:
            old_value = ApiExploitsChangeOldValue.from_dict(_old_value)

        api_exploits_change = cls(
            change_time=change_time,
            change_type=change_type,
            field=field,
            new_value=new_value,
            old_value=old_value,
        )

        api_exploits_change.additional_properties = d
        return api_exploits_change

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
