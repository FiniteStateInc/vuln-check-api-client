from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.advisory_cvrf_reference import AdvisoryCVRFReference
    from ..models.advisory_score_set import AdvisoryScoreSet
    from ..models.advisory_status import AdvisoryStatus
    from ..models.advisory_threat import AdvisoryThreat
    from ..models.advisory_vuln_check_package import AdvisoryVulnCheckPackage


T = TypeVar("T", bound="AdvisoryVulnerability")


@_attrs_define
class AdvisoryVulnerability:
    """
    Attributes:
        cve (Union[Unset, str]):
        cvssscore_sets (Union[Unset, AdvisoryScoreSet]):
        description (Union[Unset, str]):
        packages (Union[Unset, list['AdvisoryVulnCheckPackage']]): vulncheck addition
        product_statuses (Union[Unset, list['AdvisoryStatus']]):
        references (Union[Unset, list['AdvisoryCVRFReference']]):
        threats (Union[Unset, list['AdvisoryThreat']]):
    """

    cve: Union[Unset, str] = UNSET
    cvssscore_sets: Union[Unset, "AdvisoryScoreSet"] = UNSET
    description: Union[Unset, str] = UNSET
    packages: Union[Unset, list["AdvisoryVulnCheckPackage"]] = UNSET
    product_statuses: Union[Unset, list["AdvisoryStatus"]] = UNSET
    references: Union[Unset, list["AdvisoryCVRFReference"]] = UNSET
    threats: Union[Unset, list["AdvisoryThreat"]] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cve = self.cve

        cvssscore_sets: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.cvssscore_sets, Unset):
            cvssscore_sets = self.cvssscore_sets.to_dict()

        description = self.description

        packages: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.packages, Unset):
            packages = []
            for packages_item_data in self.packages:
                packages_item = packages_item_data.to_dict()
                packages.append(packages_item)

        product_statuses: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.product_statuses, Unset):
            product_statuses = []
            for product_statuses_item_data in self.product_statuses:
                product_statuses_item = product_statuses_item_data.to_dict()
                product_statuses.append(product_statuses_item)

        references: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.references, Unset):
            references = []
            for references_item_data in self.references:
                references_item = references_item_data.to_dict()
                references.append(references_item)

        threats: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.threats, Unset):
            threats = []
            for threats_item_data in self.threats:
                threats_item = threats_item_data.to_dict()
                threats.append(threats_item)

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cve is not UNSET:
            field_dict["cve"] = cve
        if cvssscore_sets is not UNSET:
            field_dict["cvssscoreSets"] = cvssscore_sets
        if description is not UNSET:
            field_dict["description"] = description
        if packages is not UNSET:
            field_dict["packages"] = packages
        if product_statuses is not UNSET:
            field_dict["productStatuses"] = product_statuses
        if references is not UNSET:
            field_dict["references"] = references
        if threats is not UNSET:
            field_dict["threats"] = threats

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.advisory_cvrf_reference import AdvisoryCVRFReference
        from ..models.advisory_score_set import AdvisoryScoreSet
        from ..models.advisory_status import AdvisoryStatus
        from ..models.advisory_threat import AdvisoryThreat
        from ..models.advisory_vuln_check_package import AdvisoryVulnCheckPackage

        d = dict(src_dict)
        cve = d.pop("cve", UNSET)

        _cvssscore_sets = d.pop("cvssscoreSets", UNSET)
        cvssscore_sets: Union[Unset, AdvisoryScoreSet]
        if isinstance(_cvssscore_sets, Unset):
            cvssscore_sets = UNSET
        else:
            cvssscore_sets = AdvisoryScoreSet.from_dict(_cvssscore_sets)

        description = d.pop("description", UNSET)

        packages = []
        _packages = d.pop("packages", UNSET)
        for packages_item_data in _packages or []:
            packages_item = AdvisoryVulnCheckPackage.from_dict(packages_item_data)

            packages.append(packages_item)

        product_statuses = []
        _product_statuses = d.pop("productStatuses", UNSET)
        for product_statuses_item_data in _product_statuses or []:
            product_statuses_item = AdvisoryStatus.from_dict(product_statuses_item_data)

            product_statuses.append(product_statuses_item)

        references = []
        _references = d.pop("references", UNSET)
        for references_item_data in _references or []:
            references_item = AdvisoryCVRFReference.from_dict(references_item_data)

            references.append(references_item)

        threats = []
        _threats = d.pop("threats", UNSET)
        for threats_item_data in _threats or []:
            threats_item = AdvisoryThreat.from_dict(threats_item_data)

            threats.append(threats_item)

        advisory_vulnerability = cls(
            cve=cve,
            cvssscore_sets=cvssscore_sets,
            description=description,
            packages=packages,
            product_statuses=product_statuses,
            references=references,
            threats=threats,
        )

        advisory_vulnerability.additional_properties = d
        return advisory_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
