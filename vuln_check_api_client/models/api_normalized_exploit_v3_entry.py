from collections.abc import Mapping
from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ApiNormalizedExploitV3Entry")


@_attrs_define
class ApiNormalizedExploitV3Entry:
    """
    Attributes:
        clone_ssh_url (Union[Unset, str]):
        clone_ssh_url_cached (Union[Unset, str]):
        date_added (Union[Unset, str]):
        exploit_availability (Union[Unset, str]):
        exploit_maturity (Union[Unset, str]):
        exploit_type (Union[Unset, str]):
        name (Union[Unset, str]):
        reference_url (Union[Unset, str]):
        refsource (Union[Unset, str]):
        repo_id (Union[Unset, str]):
        url (Union[Unset, str]):
    """

    clone_ssh_url: Union[Unset, str] = UNSET
    clone_ssh_url_cached: Union[Unset, str] = UNSET
    date_added: Union[Unset, str] = UNSET
    exploit_availability: Union[Unset, str] = UNSET
    exploit_maturity: Union[Unset, str] = UNSET
    exploit_type: Union[Unset, str] = UNSET
    name: Union[Unset, str] = UNSET
    reference_url: Union[Unset, str] = UNSET
    refsource: Union[Unset, str] = UNSET
    repo_id: Union[Unset, str] = UNSET
    url: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        clone_ssh_url = self.clone_ssh_url

        clone_ssh_url_cached = self.clone_ssh_url_cached

        date_added = self.date_added

        exploit_availability = self.exploit_availability

        exploit_maturity = self.exploit_maturity

        exploit_type = self.exploit_type

        name = self.name

        reference_url = self.reference_url

        refsource = self.refsource

        repo_id = self.repo_id

        url = self.url

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if clone_ssh_url is not UNSET:
            field_dict["clone_ssh_url"] = clone_ssh_url
        if clone_ssh_url_cached is not UNSET:
            field_dict["clone_ssh_url_cached"] = clone_ssh_url_cached
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if exploit_availability is not UNSET:
            field_dict["exploit_availability"] = exploit_availability
        if exploit_maturity is not UNSET:
            field_dict["exploit_maturity"] = exploit_maturity
        if exploit_type is not UNSET:
            field_dict["exploit_type"] = exploit_type
        if name is not UNSET:
            field_dict["name"] = name
        if reference_url is not UNSET:
            field_dict["reference_url"] = reference_url
        if refsource is not UNSET:
            field_dict["refsource"] = refsource
        if repo_id is not UNSET:
            field_dict["repo_id"] = repo_id
        if url is not UNSET:
            field_dict["url"] = url

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        clone_ssh_url = d.pop("clone_ssh_url", UNSET)

        clone_ssh_url_cached = d.pop("clone_ssh_url_cached", UNSET)

        date_added = d.pop("date_added", UNSET)

        exploit_availability = d.pop("exploit_availability", UNSET)

        exploit_maturity = d.pop("exploit_maturity", UNSET)

        exploit_type = d.pop("exploit_type", UNSET)

        name = d.pop("name", UNSET)

        reference_url = d.pop("reference_url", UNSET)

        refsource = d.pop("refsource", UNSET)

        repo_id = d.pop("repo_id", UNSET)

        url = d.pop("url", UNSET)

        api_normalized_exploit_v3_entry = cls(
            clone_ssh_url=clone_ssh_url,
            clone_ssh_url_cached=clone_ssh_url_cached,
            date_added=date_added,
            exploit_availability=exploit_availability,
            exploit_maturity=exploit_maturity,
            exploit_type=exploit_type,
            name=name,
            reference_url=reference_url,
            refsource=refsource,
            repo_id=repo_id,
            url=url,
        )

        api_normalized_exploit_v3_entry.additional_properties = d
        return api_normalized_exploit_v3_entry

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
