from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.advisory_siemens_cwe import AdvisorySiemensCWE
    from ..models.advisory_siemens_notes import AdvisorySiemensNotes
    from ..models.advisory_siemens_product_status import AdvisorySiemensProductStatus
    from ..models.advisory_siemens_references import AdvisorySiemensReferences
    from ..models.advisory_siemens_remediation import AdvisorySiemensRemediation
    from ..models.advisory_siemens_score import AdvisorySiemensScore


T = TypeVar("T", bound="AdvisorySiemensVulnerability")


@_attrs_define
class AdvisorySiemensVulnerability:
    """
    Attributes:
        cve (Union[Unset, str]):
        cwe (Union[Unset, AdvisorySiemensCWE]):
        notes (Union[Unset, list['AdvisorySiemensNotes']]):
        product_status (Union[Unset, AdvisorySiemensProductStatus]):
        references (Union[Unset, list['AdvisorySiemensReferences']]):
        remediations (Union[Unset, list['AdvisorySiemensRemediation']]):
        scores (Union[Unset, list['AdvisorySiemensScore']]):
        title (Union[Unset, str]):
    """

    cve: Union[Unset, str] = UNSET
    cwe: Union[Unset, "AdvisorySiemensCWE"] = UNSET
    notes: Union[Unset, list["AdvisorySiemensNotes"]] = UNSET
    product_status: Union[Unset, "AdvisorySiemensProductStatus"] = UNSET
    references: Union[Unset, list["AdvisorySiemensReferences"]] = UNSET
    remediations: Union[Unset, list["AdvisorySiemensRemediation"]] = UNSET
    scores: Union[Unset, list["AdvisorySiemensScore"]] = UNSET
    title: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cve = self.cve

        cwe: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.cwe, Unset):
            cwe = self.cwe.to_dict()

        notes: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.notes, Unset):
            notes = []
            for notes_item_data in self.notes:
                notes_item = notes_item_data.to_dict()
                notes.append(notes_item)

        product_status: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.product_status, Unset):
            product_status = self.product_status.to_dict()

        references: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.references, Unset):
            references = []
            for references_item_data in self.references:
                references_item = references_item_data.to_dict()
                references.append(references_item)

        remediations: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.remediations, Unset):
            remediations = []
            for remediations_item_data in self.remediations:
                remediations_item = remediations_item_data.to_dict()
                remediations.append(remediations_item)

        scores: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.scores, Unset):
            scores = []
            for scores_item_data in self.scores:
                scores_item = scores_item_data.to_dict()
                scores.append(scores_item)

        title = self.title

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cve is not UNSET:
            field_dict["cve"] = cve
        if cwe is not UNSET:
            field_dict["cwe"] = cwe
        if notes is not UNSET:
            field_dict["notes"] = notes
        if product_status is not UNSET:
            field_dict["product_status"] = product_status
        if references is not UNSET:
            field_dict["references"] = references
        if remediations is not UNSET:
            field_dict["remediations"] = remediations
        if scores is not UNSET:
            field_dict["scores"] = scores
        if title is not UNSET:
            field_dict["title"] = title

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.advisory_siemens_cwe import AdvisorySiemensCWE
        from ..models.advisory_siemens_notes import AdvisorySiemensNotes
        from ..models.advisory_siemens_product_status import AdvisorySiemensProductStatus
        from ..models.advisory_siemens_references import AdvisorySiemensReferences
        from ..models.advisory_siemens_remediation import AdvisorySiemensRemediation
        from ..models.advisory_siemens_score import AdvisorySiemensScore

        d = dict(src_dict)
        cve = d.pop("cve", UNSET)

        _cwe = d.pop("cwe", UNSET)
        cwe: Union[Unset, AdvisorySiemensCWE]
        if isinstance(_cwe, Unset):
            cwe = UNSET
        else:
            cwe = AdvisorySiemensCWE.from_dict(_cwe)

        notes = []
        _notes = d.pop("notes", UNSET)
        for notes_item_data in _notes or []:
            notes_item = AdvisorySiemensNotes.from_dict(notes_item_data)

            notes.append(notes_item)

        _product_status = d.pop("product_status", UNSET)
        product_status: Union[Unset, AdvisorySiemensProductStatus]
        if isinstance(_product_status, Unset):
            product_status = UNSET
        else:
            product_status = AdvisorySiemensProductStatus.from_dict(_product_status)

        references = []
        _references = d.pop("references", UNSET)
        for references_item_data in _references or []:
            references_item = AdvisorySiemensReferences.from_dict(references_item_data)

            references.append(references_item)

        remediations = []
        _remediations = d.pop("remediations", UNSET)
        for remediations_item_data in _remediations or []:
            remediations_item = AdvisorySiemensRemediation.from_dict(remediations_item_data)

            remediations.append(remediations_item)

        scores = []
        _scores = d.pop("scores", UNSET)
        for scores_item_data in _scores or []:
            scores_item = AdvisorySiemensScore.from_dict(scores_item_data)

            scores.append(scores_item)

        title = d.pop("title", UNSET)

        advisory_siemens_vulnerability = cls(
            cve=cve,
            cwe=cwe,
            notes=notes,
            product_status=product_status,
            references=references,
            remediations=remediations,
            scores=scores,
            title=title,
        )

        advisory_siemens_vulnerability.additional_properties = d
        return advisory_siemens_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
