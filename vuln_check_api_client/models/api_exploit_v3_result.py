from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.api_epss import ApiEPSS
    from ..models.api_exploits_trending import ApiExploitsTrending
    from ..models.api_exploits_v3_count import ApiExploitsV3Count
    from ..models.api_exploits_v3_timeline import ApiExploitsV3Timeline
    from ..models.api_normalized_exploit_v3_entry import ApiNormalizedExploitV3Entry
    from ..models.api_normalized_report_v3_entry import ApiNormalizedReportV3Entry


T = TypeVar("T", bound="ApiExploitV3Result")


@_attrs_define
class ApiExploitV3Result:
    """
    Attributes:
        field_timestamp (Union[Unset, str]): ignore this field when checking for differences/changes
        commercial_exploit_found (Union[Unset, bool]):
        counts (Union[Unset, ApiExploitsV3Count]):
        date_added (Union[Unset, str]):
        epss (Union[Unset, ApiEPSS]):
        exploits (Union[Unset, list['ApiNormalizedExploitV3Entry']]):
        id (Union[Unset, str]):
        in_kev (Union[Unset, bool]):
        in_vckev (Union[Unset, bool]):
        max_exploit_maturity (Union[Unset, str]):
        public_exploit_found (Union[Unset, bool]):
        reported_exploitation (Union[Unset, list['ApiNormalizedReportV3Entry']]):
        reported_exploited (Union[Unset, bool]):
        reported_exploited_by_botnets (Union[Unset, bool]):
        reported_exploited_by_honeypot_service (Union[Unset, bool]):
        reported_exploited_by_ransomware (Union[Unset, bool]):
        reported_exploited_by_threat_actors (Union[Unset, bool]):
        reported_exploited_by_vulncheck_canaries (Union[Unset, bool]):
        timeline (Union[Unset, ApiExploitsV3Timeline]):
        trending (Union[Unset, ApiExploitsTrending]):
        weaponized_exploit_found (Union[Unset, bool]):
    """

    field_timestamp: Union[Unset, str] = UNSET
    commercial_exploit_found: Union[Unset, bool] = UNSET
    counts: Union[Unset, "ApiExploitsV3Count"] = UNSET
    date_added: Union[Unset, str] = UNSET
    epss: Union[Unset, "ApiEPSS"] = UNSET
    exploits: Union[Unset, list["ApiNormalizedExploitV3Entry"]] = UNSET
    id: Union[Unset, str] = UNSET
    in_kev: Union[Unset, bool] = UNSET
    in_vckev: Union[Unset, bool] = UNSET
    max_exploit_maturity: Union[Unset, str] = UNSET
    public_exploit_found: Union[Unset, bool] = UNSET
    reported_exploitation: Union[Unset, list["ApiNormalizedReportV3Entry"]] = UNSET
    reported_exploited: Union[Unset, bool] = UNSET
    reported_exploited_by_botnets: Union[Unset, bool] = UNSET
    reported_exploited_by_honeypot_service: Union[Unset, bool] = UNSET
    reported_exploited_by_ransomware: Union[Unset, bool] = UNSET
    reported_exploited_by_threat_actors: Union[Unset, bool] = UNSET
    reported_exploited_by_vulncheck_canaries: Union[Unset, bool] = UNSET
    timeline: Union[Unset, "ApiExploitsV3Timeline"] = UNSET
    trending: Union[Unset, "ApiExploitsTrending"] = UNSET
    weaponized_exploit_found: Union[Unset, bool] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        field_timestamp = self.field_timestamp

        commercial_exploit_found = self.commercial_exploit_found

        counts: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.counts, Unset):
            counts = self.counts.to_dict()

        date_added = self.date_added

        epss: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.epss, Unset):
            epss = self.epss.to_dict()

        exploits: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.exploits, Unset):
            exploits = []
            for exploits_item_data in self.exploits:
                exploits_item = exploits_item_data.to_dict()
                exploits.append(exploits_item)

        id = self.id

        in_kev = self.in_kev

        in_vckev = self.in_vckev

        max_exploit_maturity = self.max_exploit_maturity

        public_exploit_found = self.public_exploit_found

        reported_exploitation: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.reported_exploitation, Unset):
            reported_exploitation = []
            for reported_exploitation_item_data in self.reported_exploitation:
                reported_exploitation_item = reported_exploitation_item_data.to_dict()
                reported_exploitation.append(reported_exploitation_item)

        reported_exploited = self.reported_exploited

        reported_exploited_by_botnets = self.reported_exploited_by_botnets

        reported_exploited_by_honeypot_service = self.reported_exploited_by_honeypot_service

        reported_exploited_by_ransomware = self.reported_exploited_by_ransomware

        reported_exploited_by_threat_actors = self.reported_exploited_by_threat_actors

        reported_exploited_by_vulncheck_canaries = self.reported_exploited_by_vulncheck_canaries

        timeline: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.timeline, Unset):
            timeline = self.timeline.to_dict()

        trending: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.trending, Unset):
            trending = self.trending.to_dict()

        weaponized_exploit_found = self.weaponized_exploit_found

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if field_timestamp is not UNSET:
            field_dict["_timestamp"] = field_timestamp
        if commercial_exploit_found is not UNSET:
            field_dict["commercial_exploit_found"] = commercial_exploit_found
        if counts is not UNSET:
            field_dict["counts"] = counts
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if epss is not UNSET:
            field_dict["epss"] = epss
        if exploits is not UNSET:
            field_dict["exploits"] = exploits
        if id is not UNSET:
            field_dict["id"] = id
        if in_kev is not UNSET:
            field_dict["inKEV"] = in_kev
        if in_vckev is not UNSET:
            field_dict["inVCKEV"] = in_vckev
        if max_exploit_maturity is not UNSET:
            field_dict["max_exploit_maturity"] = max_exploit_maturity
        if public_exploit_found is not UNSET:
            field_dict["public_exploit_found"] = public_exploit_found
        if reported_exploitation is not UNSET:
            field_dict["reported_exploitation"] = reported_exploitation
        if reported_exploited is not UNSET:
            field_dict["reported_exploited"] = reported_exploited
        if reported_exploited_by_botnets is not UNSET:
            field_dict["reported_exploited_by_botnets"] = reported_exploited_by_botnets
        if reported_exploited_by_honeypot_service is not UNSET:
            field_dict["reported_exploited_by_honeypot_service"] = reported_exploited_by_honeypot_service
        if reported_exploited_by_ransomware is not UNSET:
            field_dict["reported_exploited_by_ransomware"] = reported_exploited_by_ransomware
        if reported_exploited_by_threat_actors is not UNSET:
            field_dict["reported_exploited_by_threat_actors"] = reported_exploited_by_threat_actors
        if reported_exploited_by_vulncheck_canaries is not UNSET:
            field_dict["reported_exploited_by_vulncheck_canaries"] = reported_exploited_by_vulncheck_canaries
        if timeline is not UNSET:
            field_dict["timeline"] = timeline
        if trending is not UNSET:
            field_dict["trending"] = trending
        if weaponized_exploit_found is not UNSET:
            field_dict["weaponized_exploit_found"] = weaponized_exploit_found

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.api_epss import ApiEPSS
        from ..models.api_exploits_trending import ApiExploitsTrending
        from ..models.api_exploits_v3_count import ApiExploitsV3Count
        from ..models.api_exploits_v3_timeline import ApiExploitsV3Timeline
        from ..models.api_normalized_exploit_v3_entry import ApiNormalizedExploitV3Entry
        from ..models.api_normalized_report_v3_entry import ApiNormalizedReportV3Entry

        d = dict(src_dict)
        field_timestamp = d.pop("_timestamp", UNSET)

        commercial_exploit_found = d.pop("commercial_exploit_found", UNSET)

        _counts = d.pop("counts", UNSET)
        counts: Union[Unset, ApiExploitsV3Count]
        if isinstance(_counts, Unset):
            counts = UNSET
        else:
            counts = ApiExploitsV3Count.from_dict(_counts)

        date_added = d.pop("date_added", UNSET)

        _epss = d.pop("epss", UNSET)
        epss: Union[Unset, ApiEPSS]
        if isinstance(_epss, Unset):
            epss = UNSET
        else:
            epss = ApiEPSS.from_dict(_epss)

        exploits = []
        _exploits = d.pop("exploits", UNSET)
        for exploits_item_data in _exploits or []:
            exploits_item = ApiNormalizedExploitV3Entry.from_dict(exploits_item_data)

            exploits.append(exploits_item)

        id = d.pop("id", UNSET)

        in_kev = d.pop("inKEV", UNSET)

        in_vckev = d.pop("inVCKEV", UNSET)

        max_exploit_maturity = d.pop("max_exploit_maturity", UNSET)

        public_exploit_found = d.pop("public_exploit_found", UNSET)

        reported_exploitation = []
        _reported_exploitation = d.pop("reported_exploitation", UNSET)
        for reported_exploitation_item_data in _reported_exploitation or []:
            reported_exploitation_item = ApiNormalizedReportV3Entry.from_dict(reported_exploitation_item_data)

            reported_exploitation.append(reported_exploitation_item)

        reported_exploited = d.pop("reported_exploited", UNSET)

        reported_exploited_by_botnets = d.pop("reported_exploited_by_botnets", UNSET)

        reported_exploited_by_honeypot_service = d.pop("reported_exploited_by_honeypot_service", UNSET)

        reported_exploited_by_ransomware = d.pop("reported_exploited_by_ransomware", UNSET)

        reported_exploited_by_threat_actors = d.pop("reported_exploited_by_threat_actors", UNSET)

        reported_exploited_by_vulncheck_canaries = d.pop("reported_exploited_by_vulncheck_canaries", UNSET)

        _timeline = d.pop("timeline", UNSET)
        timeline: Union[Unset, ApiExploitsV3Timeline]
        if isinstance(_timeline, Unset):
            timeline = UNSET
        else:
            timeline = ApiExploitsV3Timeline.from_dict(_timeline)

        _trending = d.pop("trending", UNSET)
        trending: Union[Unset, ApiExploitsTrending]
        if isinstance(_trending, Unset):
            trending = UNSET
        else:
            trending = ApiExploitsTrending.from_dict(_trending)

        weaponized_exploit_found = d.pop("weaponized_exploit_found", UNSET)

        api_exploit_v3_result = cls(
            field_timestamp=field_timestamp,
            commercial_exploit_found=commercial_exploit_found,
            counts=counts,
            date_added=date_added,
            epss=epss,
            exploits=exploits,
            id=id,
            in_kev=in_kev,
            in_vckev=in_vckev,
            max_exploit_maturity=max_exploit_maturity,
            public_exploit_found=public_exploit_found,
            reported_exploitation=reported_exploitation,
            reported_exploited=reported_exploited,
            reported_exploited_by_botnets=reported_exploited_by_botnets,
            reported_exploited_by_honeypot_service=reported_exploited_by_honeypot_service,
            reported_exploited_by_ransomware=reported_exploited_by_ransomware,
            reported_exploited_by_threat_actors=reported_exploited_by_threat_actors,
            reported_exploited_by_vulncheck_canaries=reported_exploited_by_vulncheck_canaries,
            timeline=timeline,
            trending=trending,
            weaponized_exploit_found=weaponized_exploit_found,
        )

        api_exploit_v3_result.additional_properties = d
        return api_exploit_v3_result

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
