from collections.abc import Mapping
from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="ApiExploitsV3Count")


@_attrs_define
class ApiExploitsV3Count:
    """
    Attributes:
        botnets (Union[Unset, int]):
        exploits (Union[Unset, int]):
        ransomware_families (Union[Unset, int]):
        threat_actors (Union[Unset, int]):
    """

    botnets: Union[Unset, int] = UNSET
    exploits: Union[Unset, int] = UNSET
    ransomware_families: Union[Unset, int] = UNSET
    threat_actors: Union[Unset, int] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        botnets = self.botnets

        exploits = self.exploits

        ransomware_families = self.ransomware_families

        threat_actors = self.threat_actors

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if botnets is not UNSET:
            field_dict["botnets"] = botnets
        if exploits is not UNSET:
            field_dict["exploits"] = exploits
        if ransomware_families is not UNSET:
            field_dict["ransomware_families"] = ransomware_families
        if threat_actors is not UNSET:
            field_dict["threat_actors"] = threat_actors

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        botnets = d.pop("botnets", UNSET)

        exploits = d.pop("exploits", UNSET)

        ransomware_families = d.pop("ransomware_families", UNSET)

        threat_actors = d.pop("threat_actors", UNSET)

        api_exploits_v3_count = cls(
            botnets=botnets,
            exploits=exploits,
            ransomware_families=ransomware_families,
            threat_actors=threat_actors,
        )

        api_exploits_v3_count.additional_properties = d
        return api_exploits_v3_count

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
