from collections.abc import Mapping
from typing import Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AdvisoryITWExploit")


@_attrs_define
class AdvisoryITWExploit:
    """
    Attributes:
        advisory (Union[Unset, str]):
        affected_versions (Union[Unset, str]):
        analysis_url (Union[Unset, str]):
        bug_introducing_change_list_url (Union[Unset, str]):
        claimed_attribution (Union[Unset, str]):
        claimed_attribution_url (Union[Unset, str]):
        cve (Union[Unset, list[str]]):
        date_added (Union[Unset, str]):
        date_discovered (Union[Unset, str]):
        date_patched (Union[Unset, str]):
        description (Union[Unset, str]):
        first_patched_version (Union[Unset, str]):
        patch_change_list_url (Union[Unset, str]):
        product (Union[Unset, str]):
        reported_by (Union[Unset, str]):
        root_cause_analysis_url (Union[Unset, str]):
        vendor (Union[Unset, str]):
        vulnerability_type (Union[Unset, str]):
    """

    advisory: Union[Unset, str] = UNSET
    affected_versions: Union[Unset, str] = UNSET
    analysis_url: Union[Unset, str] = UNSET
    bug_introducing_change_list_url: Union[Unset, str] = UNSET
    claimed_attribution: Union[Unset, str] = UNSET
    claimed_attribution_url: Union[Unset, str] = UNSET
    cve: Union[Unset, list[str]] = UNSET
    date_added: Union[Unset, str] = UNSET
    date_discovered: Union[Unset, str] = UNSET
    date_patched: Union[Unset, str] = UNSET
    description: Union[Unset, str] = UNSET
    first_patched_version: Union[Unset, str] = UNSET
    patch_change_list_url: Union[Unset, str] = UNSET
    product: Union[Unset, str] = UNSET
    reported_by: Union[Unset, str] = UNSET
    root_cause_analysis_url: Union[Unset, str] = UNSET
    vendor: Union[Unset, str] = UNSET
    vulnerability_type: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        advisory = self.advisory

        affected_versions = self.affected_versions

        analysis_url = self.analysis_url

        bug_introducing_change_list_url = self.bug_introducing_change_list_url

        claimed_attribution = self.claimed_attribution

        claimed_attribution_url = self.claimed_attribution_url

        cve: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cve, Unset):
            cve = self.cve

        date_added = self.date_added

        date_discovered = self.date_discovered

        date_patched = self.date_patched

        description = self.description

        first_patched_version = self.first_patched_version

        patch_change_list_url = self.patch_change_list_url

        product = self.product

        reported_by = self.reported_by

        root_cause_analysis_url = self.root_cause_analysis_url

        vendor = self.vendor

        vulnerability_type = self.vulnerability_type

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if advisory is not UNSET:
            field_dict["advisory"] = advisory
        if affected_versions is not UNSET:
            field_dict["affected_versions"] = affected_versions
        if analysis_url is not UNSET:
            field_dict["analysis_url"] = analysis_url
        if bug_introducing_change_list_url is not UNSET:
            field_dict["bug_introducing_change_list_url"] = bug_introducing_change_list_url
        if claimed_attribution is not UNSET:
            field_dict["claimed_attribution"] = claimed_attribution
        if claimed_attribution_url is not UNSET:
            field_dict["claimed_attribution_url"] = claimed_attribution_url
        if cve is not UNSET:
            field_dict["cve"] = cve
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if date_discovered is not UNSET:
            field_dict["date_discovered"] = date_discovered
        if date_patched is not UNSET:
            field_dict["date_patched"] = date_patched
        if description is not UNSET:
            field_dict["description"] = description
        if first_patched_version is not UNSET:
            field_dict["first_patched_version"] = first_patched_version
        if patch_change_list_url is not UNSET:
            field_dict["patch_change_list_url"] = patch_change_list_url
        if product is not UNSET:
            field_dict["product"] = product
        if reported_by is not UNSET:
            field_dict["reported_by"] = reported_by
        if root_cause_analysis_url is not UNSET:
            field_dict["root_cause_analysis_url"] = root_cause_analysis_url
        if vendor is not UNSET:
            field_dict["vendor"] = vendor
        if vulnerability_type is not UNSET:
            field_dict["vulnerability_type"] = vulnerability_type

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        advisory = d.pop("advisory", UNSET)

        affected_versions = d.pop("affected_versions", UNSET)

        analysis_url = d.pop("analysis_url", UNSET)

        bug_introducing_change_list_url = d.pop("bug_introducing_change_list_url", UNSET)

        claimed_attribution = d.pop("claimed_attribution", UNSET)

        claimed_attribution_url = d.pop("claimed_attribution_url", UNSET)

        cve = cast(list[str], d.pop("cve", UNSET))

        date_added = d.pop("date_added", UNSET)

        date_discovered = d.pop("date_discovered", UNSET)

        date_patched = d.pop("date_patched", UNSET)

        description = d.pop("description", UNSET)

        first_patched_version = d.pop("first_patched_version", UNSET)

        patch_change_list_url = d.pop("patch_change_list_url", UNSET)

        product = d.pop("product", UNSET)

        reported_by = d.pop("reported_by", UNSET)

        root_cause_analysis_url = d.pop("root_cause_analysis_url", UNSET)

        vendor = d.pop("vendor", UNSET)

        vulnerability_type = d.pop("vulnerability_type", UNSET)

        advisory_itw_exploit = cls(
            advisory=advisory,
            affected_versions=affected_versions,
            analysis_url=analysis_url,
            bug_introducing_change_list_url=bug_introducing_change_list_url,
            claimed_attribution=claimed_attribution,
            claimed_attribution_url=claimed_attribution_url,
            cve=cve,
            date_added=date_added,
            date_discovered=date_discovered,
            date_patched=date_patched,
            description=description,
            first_patched_version=first_patched_version,
            patch_change_list_url=patch_change_list_url,
            product=product,
            reported_by=reported_by,
            root_cause_analysis_url=root_cause_analysis_url,
            vendor=vendor,
            vulnerability_type=vulnerability_type,
        )

        advisory_itw_exploit.additional_properties = d
        return advisory_itw_exploit

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
