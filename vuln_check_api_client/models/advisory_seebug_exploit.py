from collections.abc import Mapping
from typing import Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AdvisorySeebugExploit")


@_attrs_define
class AdvisorySeebugExploit:
    """
    Attributes:
        author (Union[Unset, str]):
        category (Union[Unset, str]):
        cnnvd (Union[Unset, list[str]]):
        cnvd (Union[Unset, list[str]]):
        component (Union[Unset, str]):
        cve (Union[Unset, list[str]]):
        date_added (Union[Unset, str]):
        find_time (Union[Unset, str]):
        name (Union[Unset, str]):
        ssv_id (Union[Unset, str]):
        submitter (Union[Unset, str]):
        url (Union[Unset, str]):
    """

    author: Union[Unset, str] = UNSET
    category: Union[Unset, str] = UNSET
    cnnvd: Union[Unset, list[str]] = UNSET
    cnvd: Union[Unset, list[str]] = UNSET
    component: Union[Unset, str] = UNSET
    cve: Union[Unset, list[str]] = UNSET
    date_added: Union[Unset, str] = UNSET
    find_time: Union[Unset, str] = UNSET
    name: Union[Unset, str] = UNSET
    ssv_id: Union[Unset, str] = UNSET
    submitter: Union[Unset, str] = UNSET
    url: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        author = self.author

        category = self.category

        cnnvd: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cnnvd, Unset):
            cnnvd = self.cnnvd

        cnvd: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cnvd, Unset):
            cnvd = self.cnvd

        component = self.component

        cve: Union[Unset, list[str]] = UNSET
        if not isinstance(self.cve, Unset):
            cve = self.cve

        date_added = self.date_added

        find_time = self.find_time

        name = self.name

        ssv_id = self.ssv_id

        submitter = self.submitter

        url = self.url

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if author is not UNSET:
            field_dict["author"] = author
        if category is not UNSET:
            field_dict["category"] = category
        if cnnvd is not UNSET:
            field_dict["cnnvd"] = cnnvd
        if cnvd is not UNSET:
            field_dict["cnvd"] = cnvd
        if component is not UNSET:
            field_dict["component"] = component
        if cve is not UNSET:
            field_dict["cve"] = cve
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if find_time is not UNSET:
            field_dict["find_time"] = find_time
        if name is not UNSET:
            field_dict["name"] = name
        if ssv_id is not UNSET:
            field_dict["ssv_id"] = ssv_id
        if submitter is not UNSET:
            field_dict["submitter"] = submitter
        if url is not UNSET:
            field_dict["url"] = url

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        author = d.pop("author", UNSET)

        category = d.pop("category", UNSET)

        cnnvd = cast(list[str], d.pop("cnnvd", UNSET))

        cnvd = cast(list[str], d.pop("cnvd", UNSET))

        component = d.pop("component", UNSET)

        cve = cast(list[str], d.pop("cve", UNSET))

        date_added = d.pop("date_added", UNSET)

        find_time = d.pop("find_time", UNSET)

        name = d.pop("name", UNSET)

        ssv_id = d.pop("ssv_id", UNSET)

        submitter = d.pop("submitter", UNSET)

        url = d.pop("url", UNSET)

        advisory_seebug_exploit = cls(
            author=author,
            category=category,
            cnnvd=cnnvd,
            cnvd=cnvd,
            component=component,
            cve=cve,
            date_added=date_added,
            find_time=find_time,
            name=name,
            ssv_id=ssv_id,
            submitter=submitter,
            url=url,
        )

        advisory_seebug_exploit.additional_properties = d
        return advisory_seebug_exploit

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
