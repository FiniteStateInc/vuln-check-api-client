from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.advisory_csaf_note import AdvisoryCSAFNote
    from ..models.advisory_csaf_reference import AdvisoryCSAFReference
    from ..models.advisory_csaf_score import AdvisoryCSAFScore
    from ..models.advisory_csaf_vulnerability_product_status import AdvisoryCSAFVulnerabilityProductStatus
    from ..models.advisory_cwe import AdvisoryCwe
    from ..models.advisory_flag import AdvisoryFlag
    from ..models.advisory_remediation_data import AdvisoryRemediationData
    from ..models.advisory_threat_data import AdvisoryThreatData
    from ..models.advisory_tracking_id import AdvisoryTrackingID


T = TypeVar("T", bound="AdvisoryCSAFVulnerability")


@_attrs_define
class AdvisoryCSAFVulnerability:
    """
    Attributes:
        cve (Union[Unset, str]): MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the
            vulnerability.

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3232-vulnerabilities-property---cve
        cwe (Union[Unset, AdvisoryCwe]):
        flags (Union[Unset, list['AdvisoryFlag']]): Machine readable flags for products related to vulnerability

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3235-vulnerabilities-property---flags
        ids (Union[Unset, list['AdvisoryTrackingID']]): List of IDs represents a list of unique labels or tracking IDs
            for the vulnerability (if such information exists).

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3236-vulnerabilities-property---ids
        notes (Union[Unset, list['AdvisoryCSAFNote']]): Notes holds notes associated with the Vulnerability object.
            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3238-vulnerabilities-property---notes
        product_status (Union[Unset, AdvisoryCSAFVulnerabilityProductStatus]): Provide details on the status of the
            referenced product related to the vulnerability.

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3239-vulnerabilities-property---product-status
        references (Union[Unset, list['AdvisoryCSAFReference']]): Vulnerability references holds a list of references
            associated with this vulnerability item.

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32310-vulnerabilities-property---references
        release_date (Union[Unset, str]):
        remediations (Union[Unset, list['AdvisoryRemediationData']]): Provide details of remediations associated with a
            Vulnerability

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32312-vulnerabilities-property---remediations
        scores (Union[Unset, list['AdvisoryCSAFScore']]): Scores holds the scores associated with the Vulnerability
            object.
            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32313-vulnerabilities-property---scores
            Currently only CVSS v3 is supported.
        threats (Union[Unset, list['AdvisoryThreatData']]): Provide details of threats associated with a vulnerability.

            https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32314-vulnerabilities-property---threats
    """

    cve: Union[Unset, str] = UNSET
    cwe: Union[Unset, "AdvisoryCwe"] = UNSET
    flags: Union[Unset, list["AdvisoryFlag"]] = UNSET
    ids: Union[Unset, list["AdvisoryTrackingID"]] = UNSET
    notes: Union[Unset, list["AdvisoryCSAFNote"]] = UNSET
    product_status: Union[Unset, "AdvisoryCSAFVulnerabilityProductStatus"] = UNSET
    references: Union[Unset, list["AdvisoryCSAFReference"]] = UNSET
    release_date: Union[Unset, str] = UNSET
    remediations: Union[Unset, list["AdvisoryRemediationData"]] = UNSET
    scores: Union[Unset, list["AdvisoryCSAFScore"]] = UNSET
    threats: Union[Unset, list["AdvisoryThreatData"]] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cve = self.cve

        cwe: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.cwe, Unset):
            cwe = self.cwe.to_dict()

        flags: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.flags, Unset):
            flags = []
            for flags_item_data in self.flags:
                flags_item = flags_item_data.to_dict()
                flags.append(flags_item)

        ids: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.ids, Unset):
            ids = []
            for ids_item_data in self.ids:
                ids_item = ids_item_data.to_dict()
                ids.append(ids_item)

        notes: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.notes, Unset):
            notes = []
            for notes_item_data in self.notes:
                notes_item = notes_item_data.to_dict()
                notes.append(notes_item)

        product_status: Union[Unset, dict[str, Any]] = UNSET
        if not isinstance(self.product_status, Unset):
            product_status = self.product_status.to_dict()

        references: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.references, Unset):
            references = []
            for references_item_data in self.references:
                references_item = references_item_data.to_dict()
                references.append(references_item)

        release_date = self.release_date

        remediations: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.remediations, Unset):
            remediations = []
            for remediations_item_data in self.remediations:
                remediations_item = remediations_item_data.to_dict()
                remediations.append(remediations_item)

        scores: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.scores, Unset):
            scores = []
            for scores_item_data in self.scores:
                scores_item = scores_item_data.to_dict()
                scores.append(scores_item)

        threats: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.threats, Unset):
            threats = []
            for threats_item_data in self.threats:
                threats_item = threats_item_data.to_dict()
                threats.append(threats_item)

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if cve is not UNSET:
            field_dict["cve"] = cve
        if cwe is not UNSET:
            field_dict["cwe"] = cwe
        if flags is not UNSET:
            field_dict["flags"] = flags
        if ids is not UNSET:
            field_dict["ids"] = ids
        if notes is not UNSET:
            field_dict["notes"] = notes
        if product_status is not UNSET:
            field_dict["product_status"] = product_status
        if references is not UNSET:
            field_dict["references"] = references
        if release_date is not UNSET:
            field_dict["release_date"] = release_date
        if remediations is not UNSET:
            field_dict["remediations"] = remediations
        if scores is not UNSET:
            field_dict["scores"] = scores
        if threats is not UNSET:
            field_dict["threats"] = threats

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.advisory_csaf_note import AdvisoryCSAFNote
        from ..models.advisory_csaf_reference import AdvisoryCSAFReference
        from ..models.advisory_csaf_score import AdvisoryCSAFScore
        from ..models.advisory_csaf_vulnerability_product_status import AdvisoryCSAFVulnerabilityProductStatus
        from ..models.advisory_cwe import AdvisoryCwe
        from ..models.advisory_flag import AdvisoryFlag
        from ..models.advisory_remediation_data import AdvisoryRemediationData
        from ..models.advisory_threat_data import AdvisoryThreatData
        from ..models.advisory_tracking_id import AdvisoryTrackingID

        d = dict(src_dict)
        cve = d.pop("cve", UNSET)

        _cwe = d.pop("cwe", UNSET)
        cwe: Union[Unset, AdvisoryCwe]
        if isinstance(_cwe, Unset):
            cwe = UNSET
        else:
            cwe = AdvisoryCwe.from_dict(_cwe)

        flags = []
        _flags = d.pop("flags", UNSET)
        for flags_item_data in _flags or []:
            flags_item = AdvisoryFlag.from_dict(flags_item_data)

            flags.append(flags_item)

        ids = []
        _ids = d.pop("ids", UNSET)
        for ids_item_data in _ids or []:
            ids_item = AdvisoryTrackingID.from_dict(ids_item_data)

            ids.append(ids_item)

        notes = []
        _notes = d.pop("notes", UNSET)
        for notes_item_data in _notes or []:
            notes_item = AdvisoryCSAFNote.from_dict(notes_item_data)

            notes.append(notes_item)

        _product_status = d.pop("product_status", UNSET)
        product_status: Union[Unset, AdvisoryCSAFVulnerabilityProductStatus]
        if isinstance(_product_status, Unset):
            product_status = UNSET
        else:
            product_status = AdvisoryCSAFVulnerabilityProductStatus.from_dict(_product_status)

        references = []
        _references = d.pop("references", UNSET)
        for references_item_data in _references or []:
            references_item = AdvisoryCSAFReference.from_dict(references_item_data)

            references.append(references_item)

        release_date = d.pop("release_date", UNSET)

        remediations = []
        _remediations = d.pop("remediations", UNSET)
        for remediations_item_data in _remediations or []:
            remediations_item = AdvisoryRemediationData.from_dict(remediations_item_data)

            remediations.append(remediations_item)

        scores = []
        _scores = d.pop("scores", UNSET)
        for scores_item_data in _scores or []:
            scores_item = AdvisoryCSAFScore.from_dict(scores_item_data)

            scores.append(scores_item)

        threats = []
        _threats = d.pop("threats", UNSET)
        for threats_item_data in _threats or []:
            threats_item = AdvisoryThreatData.from_dict(threats_item_data)

            threats.append(threats_item)

        advisory_csaf_vulnerability = cls(
            cve=cve,
            cwe=cwe,
            flags=flags,
            ids=ids,
            notes=notes,
            product_status=product_status,
            references=references,
            release_date=release_date,
            remediations=remediations,
            scores=scores,
            threats=threats,
        )

        advisory_csaf_vulnerability.additional_properties = d
        return advisory_csaf_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
