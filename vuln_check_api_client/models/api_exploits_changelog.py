from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.api_exploits_change import ApiExploitsChange


T = TypeVar("T", bound="ApiExploitsChangelog")


@_attrs_define
class ApiExploitsChangelog:
    """
    Attributes:
        changes (Union[Unset, list['ApiExploitsChange']]):
        cve (Union[Unset, str]):
    """

    changes: Union[Unset, list["ApiExploitsChange"]] = UNSET
    cve: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        changes: Union[Unset, list[dict[str, Any]]] = UNSET
        if not isinstance(self.changes, Unset):
            changes = []
            for changes_item_data in self.changes:
                changes_item = changes_item_data.to_dict()
                changes.append(changes_item)

        cve = self.cve

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if changes is not UNSET:
            field_dict["changes"] = changes
        if cve is not UNSET:
            field_dict["cve"] = cve

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.api_exploits_change import ApiExploitsChange

        d = dict(src_dict)
        changes = []
        _changes = d.pop("changes", UNSET)
        for changes_item_data in _changes or []:
            changes_item = ApiExploitsChange.from_dict(changes_item_data)

            changes.append(changes_item)

        cve = d.pop("cve", UNSET)

        api_exploits_changelog = cls(
            changes=changes,
            cve=cve,
        )

        api_exploits_changelog.additional_properties = d
        return api_exploits_changelog

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
