from collections.abc import Mapping
from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AdvisoryGitHubExploit")


@_attrs_define
class AdvisoryGitHubExploit:
    """
    Attributes:
        clone_https_url (Union[Unset, str]):
        clone_ssh_url (Union[Unset, str]):
        clone_ssh_url_cached (Union[Unset, str]):
        currently_trending (Union[Unset, bool]):
        cve (Union[Unset, str]):
        date_added (Union[Unset, str]):
        date_last_revised (Union[Unset, str]):
        exploit_type (Union[Unset, str]):
        forks (Union[Unset, int]):
        html_url (Union[Unset, str]):
        id (Union[Unset, str]):
        language (Union[Unset, str]):
        reference_url (Union[Unset, str]):
        refsource (Union[Unset, str]):
        repo_full_path (Union[Unset, str]):
        repo_id (Union[Unset, str]):
        repo_name (Union[Unset, str]):
        repo_owner (Union[Unset, str]):
        stars (Union[Unset, int]):
    """

    clone_https_url: Union[Unset, str] = UNSET
    clone_ssh_url: Union[Unset, str] = UNSET
    clone_ssh_url_cached: Union[Unset, str] = UNSET
    currently_trending: Union[Unset, bool] = UNSET
    cve: Union[Unset, str] = UNSET
    date_added: Union[Unset, str] = UNSET
    date_last_revised: Union[Unset, str] = UNSET
    exploit_type: Union[Unset, str] = UNSET
    forks: Union[Unset, int] = UNSET
    html_url: Union[Unset, str] = UNSET
    id: Union[Unset, str] = UNSET
    language: Union[Unset, str] = UNSET
    reference_url: Union[Unset, str] = UNSET
    refsource: Union[Unset, str] = UNSET
    repo_full_path: Union[Unset, str] = UNSET
    repo_id: Union[Unset, str] = UNSET
    repo_name: Union[Unset, str] = UNSET
    repo_owner: Union[Unset, str] = UNSET
    stars: Union[Unset, int] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        clone_https_url = self.clone_https_url

        clone_ssh_url = self.clone_ssh_url

        clone_ssh_url_cached = self.clone_ssh_url_cached

        currently_trending = self.currently_trending

        cve = self.cve

        date_added = self.date_added

        date_last_revised = self.date_last_revised

        exploit_type = self.exploit_type

        forks = self.forks

        html_url = self.html_url

        id = self.id

        language = self.language

        reference_url = self.reference_url

        refsource = self.refsource

        repo_full_path = self.repo_full_path

        repo_id = self.repo_id

        repo_name = self.repo_name

        repo_owner = self.repo_owner

        stars = self.stars

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if clone_https_url is not UNSET:
            field_dict["clone_https_url"] = clone_https_url
        if clone_ssh_url is not UNSET:
            field_dict["clone_ssh_url"] = clone_ssh_url
        if clone_ssh_url_cached is not UNSET:
            field_dict["clone_ssh_url_cached"] = clone_ssh_url_cached
        if currently_trending is not UNSET:
            field_dict["currently_trending"] = currently_trending
        if cve is not UNSET:
            field_dict["cve"] = cve
        if date_added is not UNSET:
            field_dict["date_added"] = date_added
        if date_last_revised is not UNSET:
            field_dict["date_last_revised"] = date_last_revised
        if exploit_type is not UNSET:
            field_dict["exploit_type"] = exploit_type
        if forks is not UNSET:
            field_dict["forks"] = forks
        if html_url is not UNSET:
            field_dict["html_url"] = html_url
        if id is not UNSET:
            field_dict["id"] = id
        if language is not UNSET:
            field_dict["language"] = language
        if reference_url is not UNSET:
            field_dict["reference_url"] = reference_url
        if refsource is not UNSET:
            field_dict["refsource"] = refsource
        if repo_full_path is not UNSET:
            field_dict["repo_full_path"] = repo_full_path
        if repo_id is not UNSET:
            field_dict["repo_id"] = repo_id
        if repo_name is not UNSET:
            field_dict["repo_name"] = repo_name
        if repo_owner is not UNSET:
            field_dict["repo_owner"] = repo_owner
        if stars is not UNSET:
            field_dict["stars"] = stars

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        d = dict(src_dict)
        clone_https_url = d.pop("clone_https_url", UNSET)

        clone_ssh_url = d.pop("clone_ssh_url", UNSET)

        clone_ssh_url_cached = d.pop("clone_ssh_url_cached", UNSET)

        currently_trending = d.pop("currently_trending", UNSET)

        cve = d.pop("cve", UNSET)

        date_added = d.pop("date_added", UNSET)

        date_last_revised = d.pop("date_last_revised", UNSET)

        exploit_type = d.pop("exploit_type", UNSET)

        forks = d.pop("forks", UNSET)

        html_url = d.pop("html_url", UNSET)

        id = d.pop("id", UNSET)

        language = d.pop("language", UNSET)

        reference_url = d.pop("reference_url", UNSET)

        refsource = d.pop("refsource", UNSET)

        repo_full_path = d.pop("repo_full_path", UNSET)

        repo_id = d.pop("repo_id", UNSET)

        repo_name = d.pop("repo_name", UNSET)

        repo_owner = d.pop("repo_owner", UNSET)

        stars = d.pop("stars", UNSET)

        advisory_git_hub_exploit = cls(
            clone_https_url=clone_https_url,
            clone_ssh_url=clone_ssh_url,
            clone_ssh_url_cached=clone_ssh_url_cached,
            currently_trending=currently_trending,
            cve=cve,
            date_added=date_added,
            date_last_revised=date_last_revised,
            exploit_type=exploit_type,
            forks=forks,
            html_url=html_url,
            id=id,
            language=language,
            reference_url=reference_url,
            refsource=refsource,
            repo_full_path=repo_full_path,
            repo_id=repo_id,
            repo_name=repo_name,
            repo_owner=repo_owner,
            stars=stars,
        )

        advisory_git_hub_exploit.additional_properties = d
        return advisory_git_hub_exploit

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
